@each $mapName, $map in $utilities {
  $important: map-get($map, "important");
  $property: map-get($map, "property");
  $values: map-get($map, "values");
  $state: map-get($map, "state");
  $class: map-get($map, "class");
  $media: map-get($map, "media");
  $range: map-get($map, "range");

  $dash: "-";
  @if not $class {
    $dash: "";
  }
  $importantValue: "";
  @if $important {
    $importantValue: "!important";
  }

  $stateVal: "";
  $newState: "";
  @if $state {
    $stateVal: ":" + $state;
    $newState: $state + $separator;
  }

  @if $media {
    @each $break, $point in $breakpoints {
      @media screen and (min-width: #{$point}) {
        @each $name, $value in $values {
          $util-id: $break + $separator + $newState + $class + $dash + $name + $stateVal;
          @if ($break == null or $break == "" or $break == $xs) {
            $util-id: $newState + $class + $dash + $name + $stateVal;
          }
          .#{$util-id} {
            @each $props in $property {
              @each $start, $end in $range {
                @if (not is-int($name) or $name >= $start and $name <= $end) {
                  #{$props}: #{$value} #{$importantValue};
                }
              }
            }
          }
        }
      }
    }
  } @else {
    @each $name, $value in $values {
      $util-id: $newState + $class + $dash + $name + $stateVal;
      .#{$util-id} {
        @each $props in $property {
          @each $start, $end in $range {
            @if (not is-int($name) or $name >= $start and $name <= $end) {
              #{$props}: #{$value} #{$importantValue};
            }
          }
        }
      }
    }
  }
}
